// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id 
  name      String
  email     String?     @unique
  phoneNo String? 
  sessions  Session[]  @relation("HostSessions")
  participants Participant[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Session {
  id              String        @id @default(uuid())
  title           String?
  host            User          @relation("HostSessions", fields: [hostId], references: [id])
  hostId          String
  participants    Participant[]
  chunks          Chunk[]
  processingJobs  ProcessingJob[]

  startedAt       DateTime      @default(now())
  endedAt         DateTime?
  isFinalized     Boolean       @default(false)
  finalAssetUrl   String?
  durationSeconds Int?

  createdAt       DateTime      @default(now())
}


model Participant {
  id          String   @id @default(uuid())
  session     Session  @relation(fields: [sessionId], references: [id])
  sessionId   String
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  name        String?
  joins       JoinLog[]
  chunks      Chunk[]
}

model JoinLog {
  id             String      @id @default(uuid())
  participant    Participant @relation(fields: [participantId], references: [id])
  participantId  String
  joinedAt       DateTime
  leftAt         DateTime?
}
model Chunk {
  id             String       @id @default(uuid())
  session        Session      @relation(fields: [sessionId], references: [id])
  sessionId      String

  participant    Participant  @relation(fields: [participantId], references: [id])
  participantId  String

  chunkIndex     Int
  uploadedAt     DateTime     @default(now())
  sizeBytes      Int
  mimeType       String
  storageUrl     String
  status         ChunkStatus  @default(uploaded)

  @@unique([sessionId, participantId, chunkIndex])
}

enum ChunkStatus {
  pending
  uploaded
  processing
  error
}

model ProcessingJob {
  id          String    @id @default(uuid())
  session     Session   @relation(fields: [sessionId], references: [id])
  sessionId   String
  status      JobStatus @default(queued)
  logs        String?
  startedAt   DateTime?
  endedAt     DateTime?
}

enum JobStatus {
  queued
  running
  done
  failed
}

